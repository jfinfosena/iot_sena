{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bienvenido a Tecnolog\u00eda Pr\u00e1ctica e Innovaci\u00f3n","text":"<p>\u00a1Hola y bienvenido a nuestro sitio de demostraciones tecnol\u00f3gicas!</p>"},{"location":"#nuestra-mision","title":"\ud83c\udfaf Nuestra Misi\u00f3n","text":"<p>Este sitio est\u00e1 dedicado a demostrar de manera pr\u00e1ctica c\u00f3mo la tecnolog\u00eda moderna puede resolver problemas reales a trav\u00e9s de proyectos innovadores. Aqu\u00ed encontrar\u00e1s desde soluciones IoT hasta aplicaciones de inteligencia artificial, con c\u00f3digo funcional y gu\u00edas paso a paso.</p>"},{"location":"#areas-de-enfoque","title":"\ud83d\udd27 \u00c1reas de Enfoque","text":""},{"location":"#internet-de-las-cosas-iot-y-domotica","title":"Internet de las Cosas (IoT) y Dom\u00f3tica","text":"<p>La integraci\u00f3n de dispositivos inteligentes para: - Automatizar procesos - Controlar dispositivos remotamente - Monitorear ambientes en tiempo real - Optimizar recursos y energ\u00eda</p>"},{"location":"#inteligencia-artificial-y-aplicaciones-web","title":"Inteligencia Artificial y Aplicaciones Web","text":"<p>Desarrollo de soluciones inteligentes para: - Generaci\u00f3n de contenido automatizado - Interfaces conversacionales - Procesamiento de lenguaje natural - Aplicaciones web interactivas</p>"},{"location":"#proyectos-disponibles","title":"\ud83d\ude80 Proyectos Disponibles","text":""},{"location":"#proyecto-1-control-iot-con-esp32","title":"Proyecto 1: Control IoT con ESP32","text":"<ul> <li>Control remoto de LED RGB via MQTT</li> <li>Comunicaci\u00f3n WiFi y protocolos IoT</li> <li>Integraci\u00f3n con brokers p\u00fablicos</li> <li>Monitoreo en tiempo real</li> </ul>"},{"location":"#proyecto-2-aplicaciones-ia-con-streamlit","title":"Proyecto 2: Aplicaciones IA con Streamlit","text":"<ul> <li>Chat inteligente con Gemini AI</li> <li>Generador autom\u00e1tico de correos</li> <li>Interfaces web interactivas</li> <li>Integraci\u00f3n con APIs de IA</li> </ul>"},{"location":"#tecnologias-utilizadas","title":"\ud83d\udcbb Tecnolog\u00edas Utilizadas","text":""},{"location":"#hardware-y-iot","title":"Hardware y IoT","text":"<ul> <li>Microcontroladores: ESP32, Arduino</li> <li>Protocolos: WiFi, MQTT, Bluetooth</li> <li>Componentes: LEDs RGB, sensores diversos</li> <li>Plataformas: Arduino IDE, PlatformIO</li> </ul>"},{"location":"#software-y-ia","title":"Software y IA","text":"<ul> <li>Lenguajes: Python, C++</li> <li>Frameworks: Streamlit, Arduino</li> <li>APIs: Google Gemini AI</li> <li>Servicios: Brokers MQTT, Google Cloud</li> </ul>"},{"location":"content/p1/","title":"Gu\u00eda B\u00e1sica: ESP32 con MQTT y LED RGB","text":""},{"location":"content/p1/#descripcion-del-ejercicio","title":"Descripci\u00f3n del Ejercicio","text":"<p>Este ejercicio demuestra c\u00f3mo crear un sistema de control remoto para un LED RGB usando un ESP32-C3 y el protocolo MQTT. El proyecto permite:</p> <ul> <li>Conectar el ESP32 a una red WiFi</li> <li>Establecer comunicaci\u00f3n MQTT con un broker p\u00fablico</li> <li>Controlar un LED RGB de forma remota mediante mensajes MQTT</li> <li>Recibir comandos desde cualquier cliente MQTT (aplicaci\u00f3n web, m\u00f3vil, etc.)</li> </ul>"},{"location":"content/p1/#que-hace-el-codigo","title":"\u00bfQu\u00e9 hace el c\u00f3digo?","text":"<ol> <li>Inicializaci\u00f3n: Configura el LED RGB y establece conexi\u00f3n WiFi</li> <li>Conexi\u00f3n MQTT: Se conecta al broker p\u00fablico <code>broker.emqx.io</code></li> <li>Suscripci\u00f3n: Escucha mensajes en el tema <code>modulo1</code></li> <li>Control del LED: Cambia el color del LED seg\u00fan los comandos recibidos:</li> <li><code>red</code> \u2192 LED rojo</li> <li><code>green</code> \u2192 LED verde</li> <li><code>blue</code> \u2192 LED azul</li> <li><code>off</code> \u2192 LED apagado</li> </ol>"},{"location":"content/p1/#aplicaciones-practicas","title":"Aplicaciones Pr\u00e1cticas","text":"<ul> <li>Dom\u00f3tica b\u00e1sica</li> <li>Indicadores de estado remotos</li> <li>Sistemas de notificaci\u00f3n visual</li> <li>Prototipado IoT</li> </ul>"},{"location":"content/p1/#requisitos","title":"Requisitos","text":"<ul> <li>ESP32-C3 o compatible</li> <li>Arduino IDE instalado</li> <li>Conexi\u00f3n WiFi</li> <li>Cable USB para programar el ESP32</li> </ul>"},{"location":"content/p1/#librerias-necesarias","title":"Librer\u00edas Necesarias","text":"<p>Instala las siguientes librer\u00edas en Arduino IDE:</p> <ol> <li>WiFi (incluida por defecto)</li> <li>PubSubClient - Para comunicaci\u00f3n MQTT</li> <li>Adafruit NeoPixel - Para controlar el LED RGB</li> </ol>"},{"location":"content/p1/#instalacion-de-librerias","title":"Instalaci\u00f3n de librer\u00edas:","text":"<ol> <li>Abre Arduino IDE</li> <li>Ve a <code>Herramientas &gt; Administrar Bibliotecas</code></li> <li>Busca e instala:</li> <li><code>PubSubClient</code> por Nick O'Leary</li> <li><code>Adafruit NeoPixel</code> por Adafruit</li> </ol>"},{"location":"content/p1/#configuracion-del-hardware","title":"Configuraci\u00f3n del Hardware","text":"<ol> <li>Conecta el ESP32 al computador usando cable USB</li> <li>Selecciona la placa en Arduino IDE:</li> <li>Ve a <code>Herramientas &gt; Placa &gt; ESP32 Arduino &gt; ESP32C3 Dev Module</code></li> <li>Selecciona el puerto correcto en <code>Herramientas &gt; Puerto</code></li> </ol>"},{"location":"content/p1/#codigo-completo","title":"C\u00f3digo Completo","text":"<pre><code>#include &lt;WiFi.h&gt;\n#include &lt;PubSubClient.h&gt;\n#include &lt;Adafruit_NeoPixel.h&gt;\n\n#define RGB_LED_PIN 8 // Pin GPIO para el LED RGB (ajusta si es diferente en tu placa)\n#define NUM_PIXELS 1  // N\u00famero de LEDs (1 para el LED RGB integrado)\n\nAdafruit_NeoPixel rgbLed(NUM_PIXELS, RGB_LED_PIN, NEO_GRB + NEO_KHZ800);\n\nString broker = \"broker.emqx.io\";\nint port = 1883;\nString TopicSubscribe = \"modulo1\";\n\nWiFiClient wifiClient;\nPubSubClient wifiMQTT(wifiClient);\n\nvoid mqttCallback(char* topic, byte* payload, unsigned int length) {\n  String mqttdata = \"\";\n  for (int i = 0; i &lt; length; i++) {\n    mqttdata += (char)payload[i];\n  }\n\n  Serial.print(\"Mensaje MQTT recibido: \");\n  Serial.println(mqttdata);\n\n  // Controlar el LED RGB seg\u00fan el mensaje MQTT\n  if (mqttdata == \"red\") {\n    rgbLed.setPixelColor(0, rgbLed.Color(255, 0, 0)); // Rojo\n    rgbLed.show();\n    Serial.println(\"LED RGB configurado a Rojo\");\n  } else if (mqttdata == \"green\") {\n    rgbLed.setPixelColor(0, rgbLed.Color(0, 255, 0)); // Verde\n    rgbLed.show();\n    Serial.println(\"LED RGB configurado a Verde\");\n  } else if (mqttdata == \"blue\") {\n    rgbLed.setPixelColor(0, rgbLed.Color(0, 0, 255)); // Azul\n    rgbLed.show();\n    Serial.println(\"LED RGB configurado a Azul\");\n  } else if (mqttdata == \"off\") {\n    rgbLed.setPixelColor(0, rgbLed.Color(0, 0, 0)); // Apagado\n    rgbLed.show();\n    Serial.println(\"LED RGB apagado\");\n  } else {\n    Serial.println(\"Comando desconocido\");\n  }\n}\n\nvoid setup() {\n  Serial.begin(115200); // Inicializar comunicaci\u00f3n serial a 115200 baudios\n  Serial.println(\"Iniciando Cliente MQTT con LED RGB para ESP32-C3...\");\n\n  rgbLed.begin(); // Inicializar el LED RGB\n  rgbLed.setBrightness(50); // Establecer brillo (0-255, ajusta seg\u00fan necesidad)\n  rgbLed.setPixelColor(0, rgbLed.Color(0, 0, 0)); // Iniciar con LED apagado\n  rgbLed.show();\n  Serial.println(\"LED RGB inicializado\");\n\n  Serial.print(\"Conectando a WiFi...\");\n  WiFi.begin(\"SENAF\", \"1234567890qwe\");\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(100);\n    Serial.print(\".\");\n  }\n  Serial.println(\"\\nWiFi conectado\");\n\n  wifiMQTT.setServer(broker.c_str(), port);\n  wifiMQTT.setCallback(mqttCallback);\n  Serial.println(\"Conectando al broker MQTT...\");\n\n  if (wifiMQTT.connect(\"myClient\", \"admin\", \"1234567890\")) {\n    Serial.println(\"MQTT conectado\");\n    wifiMQTT.subscribe(TopicSubscribe.c_str());\n    Serial.print(\"Suscrito al tema: \");\n    Serial.println(TopicSubscribe);\n  } else {\n    Serial.println(\"Fallo en la conexi\u00f3n MQTT\");\n  }\n}\n\nvoid loop() {\n  wifiMQTT.loop();\n}\n</code></pre>"},{"location":"content/p1/#configuracion-del-codigo","title":"Configuraci\u00f3n del C\u00f3digo","text":""},{"location":"content/p1/#parametros-wifi","title":"Par\u00e1metros WiFi","text":"<p>Modifica estas l\u00edneas en el c\u00f3digo seg\u00fan tu red: <pre><code>WiFi.begin(\"TU_WIFI\", \"TU_PASSWORD\");\n</code></pre></p>"},{"location":"content/p1/#configuracion-mqtt","title":"Configuraci\u00f3n MQTT","text":"<p>El c\u00f3digo usa: - Broker: <code>broker.emqx.io</code> (p\u00fablico) - Puerto: <code>1883</code> - Tema: <code>modulo1</code> - Usuario: <code>admin</code> - Contrase\u00f1a: <code>1234567890</code></p>"},{"location":"content/p1/#guia-paso-a-paso-para-ejecutar","title":"Gu\u00eda Paso a Paso para Ejecutar","text":""},{"location":"content/p1/#paso-1-preparacion-del-entorno","title":"Paso 1: Preparaci\u00f3n del Entorno","text":"<ol> <li>Instala Arduino IDE (versi\u00f3n 2.0 o superior recomendada)</li> <li>Configura el soporte para ESP32:</li> <li>Ve a <code>Archivo &gt; Preferencias</code></li> <li>En \"URLs Adicionales de Gestor de Tarjetas\" agrega:      <pre><code>https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json\n</code></pre></li> <li>Ve a <code>Herramientas &gt; Placa &gt; Gestor de Tarjetas</code></li> <li>Busca \"ESP32\" e instala \"ESP32 by Espressif Systems\"</li> </ol>"},{"location":"content/p1/#paso-2-instalacion-de-librerias","title":"Paso 2: Instalaci\u00f3n de Librer\u00edas","text":"<ol> <li>Abre el Gestor de Librer\u00edas (<code>Herramientas &gt; Administrar Bibliotecas</code>)</li> <li>Instala las siguientes librer\u00edas:</li> <li>Busca <code>PubSubClient</code> \u2192 Instala \"PubSubClient by Nick O'Leary\"</li> <li>Busca <code>Adafruit NeoPixel</code> \u2192 Instala \"Adafruit NeoPixel by Adafruit\"</li> </ol>"},{"location":"content/p1/#paso-3-configuracion-del-hardware","title":"Paso 3: Configuraci\u00f3n del Hardware","text":"<ol> <li>Conecta el ESP32-C3 al computador usando cable USB</li> <li>Selecciona la configuraci\u00f3n correcta:</li> <li>Placa: <code>Herramientas &gt; Placa &gt; ESP32 Arduino &gt; ESP32C3 Dev Module</code></li> <li>Puerto: <code>Herramientas &gt; Puerto &gt; [Selecciona el puerto COM correspondiente]</code></li> <li>Velocidad de subida: <code>921600</code></li> </ol>"},{"location":"content/p1/#paso-4-configuracion-del-codigo","title":"Paso 4: Configuraci\u00f3n del C\u00f3digo","text":"<ol> <li>Copia el c\u00f3digo completo (secci\u00f3n \"C\u00f3digo Completo\" arriba)</li> <li>Modifica los par\u00e1metros WiFi:    <pre><code>WiFi.begin(\"TU_NOMBRE_WIFI\", \"TU_PASSWORD_WIFI\");\n</code></pre></li> <li>Opcional: Cambia el tema MQTT si deseas:    <pre><code>String TopicSubscribe = \"tu_tema_personalizado\";\n</code></pre></li> </ol>"},{"location":"content/p1/#paso-5-carga-y-verificacion","title":"Paso 5: Carga y Verificaci\u00f3n","text":"<ol> <li>Compila y sube el c\u00f3digo:</li> <li>Presiona <code>Ctrl+U</code> o haz clic en el bot\u00f3n \"Subir\" (\u2192)</li> <li> <p>Espera a que termine la compilaci\u00f3n y carga</p> </li> <li> <p>Abre el Monitor Serie:</p> </li> <li>Ve a <code>Herramientas &gt; Monitor Serie</code></li> <li>Configura velocidad a <code>115200 baudios</code></li> <li> <p>Presiona el bot\u00f3n RESET del ESP32 si es necesario</p> </li> <li> <p>Verifica la conexi\u00f3n exitosa:    <pre><code>Iniciando Cliente MQTT con LED RGB para ESP32-C3...\nLED RGB inicializado\nConectando a WiFi........\nWiFi conectado\nConectando al broker MQTT...\nMQTT conectado\nSuscrito al tema: modulo1\n</code></pre></p> </li> </ol>"},{"location":"content/p1/#paso-6-prueba-del-sistema","title":"Paso 6: Prueba del Sistema","text":"<ol> <li>Si ves todos los mensajes de conexi\u00f3n exitosa, el sistema est\u00e1 listo</li> <li>El LED deber\u00eda estar apagado inicialmente</li> <li>Procede a la secci\u00f3n \"Prueba con Cliente Web MQTT\" para enviar comandos</li> </ol>"},{"location":"content/p1/#prueba-con-cliente-web-mqtt","title":"Prueba con Cliente Web MQTT","text":"<ol> <li> <p>Abre el cliente web: MQTTX Web Client</p> </li> <li> <p>Configura la conexi\u00f3n:</p> </li> <li>Host: <code>broker.emqx.io</code></li> <li>Puerto: <code>1883</code></li> <li>Username: <code>admin</code></li> <li>Password: <code>1234567890</code></li> <li> <p>Haz clic en \"Connect\"</p> </li> <li> <p>Env\u00eda comandos:</p> </li> <li>Tema: <code>modulo1</code></li> <li> <p>Mensajes disponibles:</p> <ul> <li><code>red</code> - LED rojo</li> <li><code>green</code> - LED verde</li> <li><code>blue</code> - LED azul</li> <li><code>off</code> - LED apagado</li> </ul> </li> <li> <p>Verifica funcionamiento:</p> </li> <li>Env\u00eda cada comando desde el cliente web</li> <li>Observa el cambio de color en el LED del ESP32</li> <li>Revisa los mensajes en el Monitor Serie</li> </ol>"},{"location":"content/p1/#comandos-de-prueba","title":"Comandos de Prueba","text":"Comando Resultado <code>red</code> LED se enciende en rojo <code>green</code> LED se enciende en verde <code>blue</code> LED se enciende en azul <code>off</code> LED se apaga"},{"location":"content/p1/#solucion-de-problemas","title":"Soluci\u00f3n de Problemas","text":"<ul> <li>No conecta WiFi: Verifica nombre y contrase\u00f1a de red</li> <li>No conecta MQTT: Revisa conexi\u00f3n a internet</li> <li>LED no cambia: Verifica pin GPIO 8 y conexiones</li> <li>Sin mensajes: Confirma que el tema sea exactamente <code>modulo1</code></li> </ul> <p>\u00a1Listo! Tu ESP32 deber\u00eda responder a los comandos MQTT cambiando el color del LED RGB.</p>"},{"location":"content/p2/","title":"Proyecto Gemini AI - Aplicaciones con Streamlit","text":"<p>Este proyecto contiene dos aplicaciones desarrolladas con Streamlit que utilizan la API de Gemini AI para generar contenido inteligente.</p>"},{"location":"content/p2/#contenido-del-proyecto","title":"\ud83d\udccb Contenido del Proyecto","text":"<ul> <li>app1.py: Chat b\u00e1sico con Gemini AI</li> <li>app2.py: Generador de correos electr\u00f3nicos con palabras clave</li> </ul>"},{"location":"content/p2/#configuracion-del-proyecto","title":"\ud83d\ude80 Configuraci\u00f3n del Proyecto","text":""},{"location":"content/p2/#prerrequisitos","title":"Prerrequisitos","text":"<ul> <li>Python 3.8 o superior</li> <li>Cuenta de Google Cloud con acceso a Gemini AI</li> <li>API Key de Gemini AI</li> </ul>"},{"location":"content/p2/#instalacion","title":"Instalaci\u00f3n","text":"<ol> <li> <p>Crear el directorio del proyecto <pre><code>mkdir gemini_test\ncd gemini_test\n</code></pre></p> </li> <li> <p>Crear entorno virtual <pre><code>python -m venv .venv\n</code></pre></p> </li> <li> <p>Activar el entorno virtual</p> </li> </ol> <p>En Windows:    <pre><code>.venv\\Scripts\\activate\n</code></pre></p> <p>En macOS/Linux:    <pre><code>source .venv/bin/activate\n</code></pre></p> <ol> <li>Instalar dependencias <pre><code># Opci\u00f3n 1: Instalar desde requirements.txt (recomendado)\npip install -r requirements.txt\n\n# Opci\u00f3n 2: Instalar manualmente\npip install streamlit google-generativeai python-dotenv\n</code></pre></li> </ol>"},{"location":"content/p2/#configuracion-de-api-key","title":"\ud83d\udd11 Configuraci\u00f3n de API Key","text":"<p>\u26a0\ufe0f IMPORTANTE: Antes de usar las aplicaciones, debes obtener tu propia API Key de Gemini AI:</p> <ol> <li>Ve a Google AI Studio</li> <li>Crea una nueva API Key</li> <li>Reemplaza la API Key en los archivos <code>app1.py</code> y <code>app2.py</code>:    <pre><code>client = genai.Client(api_key=\"TU_API_KEY_AQUI\")\n</code></pre></li> </ol>"},{"location":"content/p2/#aplicacion-1-chat-basico-app1py","title":"\ud83d\udcf1 Aplicaci\u00f3n 1: Chat B\u00e1sico (app1.py)","text":""},{"location":"content/p2/#descripcion","title":"Descripci\u00f3n","text":"<p>Una aplicaci\u00f3n simple de chat que permite hacer preguntas a Gemini AI y recibir respuestas inteligentes.</p>"},{"location":"content/p2/#caracteristicas","title":"Caracter\u00edsticas","text":"<ul> <li>Interfaz simple y limpia</li> <li>Campo de entrada para preguntas</li> <li>Respuestas generadas por Gemini AI</li> <li>Manejo de errores</li> </ul>"},{"location":"content/p2/#como-crear-app1py","title":"C\u00f3mo crear app1.py","text":"<ol> <li> <p>Crear el archivo <pre><code>touch app1.py\n</code></pre></p> </li> <li> <p>C\u00f3digo completo de app1.py <pre><code>import streamlit as st\nfrom google import genai\n\n# Configuraci\u00f3n de la p\u00e1gina\nst.set_page_config(page_title=\"Chat B\u00e1sico con Gemini\", layout=\"centered\")\nst.title(\"\ud83d\udcac Chat con Gemini\")\nst.markdown(\"Ingresa un tema o pregunta para obtener una respuesta generada por Gemini.\")\n\n# Interfaz de usuario\nprompt = st.text_input(\"Escribe tu pregunta o tema:\", placeholder=\"Ej. Explica c\u00f3mo funciona la IA en pocas palabras\")\nenviar = st.button(\"Generar Respuesta\")\n\n# Funci\u00f3n que usa el c\u00f3digo original\ndef generar_respuesta(prompt):\n    if not prompt:\n        return \"Por favor, ingresa un tema o pregunta.\"\n    try:\n        client = genai.Client(api_key=\"TU_API_KEY_AQUI\")  # C\u00f3digo original\n        response = client.models.generate_content(\n            model=\"gemini-2.0-flash\", contents=prompt  # C\u00f3digo original con prompt din\u00e1mico\n        )\n        return response.text  # C\u00f3digo original\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n\n# L\u00f3gica principal\nif enviar and prompt:\n    with st.spinner(\"Generando respuesta...\"):\n        respuesta = generar_respuesta(prompt)\n        st.subheader(\"Respuesta:\")\n        st.markdown(respuesta)\nelse:\n    st.info(\"Escribe un tema o pregunta y haz clic en Generar Respuesta.\")\n</code></pre></p> </li> </ol>"},{"location":"content/p2/#ejecutar-app1py","title":"Ejecutar app1.py","text":"<pre><code>streamlit run app1.py\n</code></pre>"},{"location":"content/p2/#aplicacion-2-generador-de-correos-app2py","title":"\ud83d\udce7 Aplicaci\u00f3n 2: Generador de Correos (app2.py)","text":""},{"location":"content/p2/#descripcion_1","title":"Descripci\u00f3n","text":"<p>Una aplicaci\u00f3n avanzada que genera correos electr\u00f3nicos profesionales basados en palabras clave, con opciones de personalizaci\u00f3n como tono, tipo de correo, destinatario y contexto.</p>"},{"location":"content/p2/#caracteristicas_1","title":"Caracter\u00edsticas","text":"<ul> <li>Campos para destinatario y asunto</li> <li>Selecci\u00f3n de tono (Profesional, Amigable, Formal, etc.)</li> <li>Tipos de correo (Comercial, Informativo, Solicitud, etc.)</li> <li>\u00c1rea para palabras clave</li> <li>Contexto adicional opcional</li> <li>Visualizaci\u00f3n del correo generado</li> <li>Sidebar con instrucciones</li> </ul>"},{"location":"content/p2/#como-crear-app2py","title":"C\u00f3mo crear app2.py","text":"<ol> <li> <p>Crear el archivo <pre><code>touch app2.py\n</code></pre></p> </li> <li> <p>Estructura del c\u00f3digo</p> </li> </ol> <p>El archivo <code>app2.py</code> contiene las siguientes secciones principales:</p> <ul> <li>Configuraci\u00f3n de p\u00e1gina: T\u00edtulo y descripci\u00f3n</li> <li>Interfaz de usuario: Campos de entrada organizados en columnas</li> <li>Funci\u00f3n de generaci\u00f3n: L\u00f3gica para crear el prompt y llamar a Gemini</li> <li>L\u00f3gica principal: Manejo de la generaci\u00f3n y visualizaci\u00f3n</li> <li> <p>Sidebar: Informaci\u00f3n y consejos de uso</p> </li> <li> <p>C\u00f3digo completo de app2.py</p> </li> </ul> <pre><code>import streamlit as st\nfrom google import genai\n\n# Configuraci\u00f3n de la p\u00e1gina\nst.set_page_config(page_title=\"Generador de Correos con Gemini\", layout=\"centered\")\nst.title(\"\ud83d\udce7 Generador de Correos con Gemini\")\nst.markdown(\"Crea correos electr\u00f3nicos profesionales a partir de palabras clave usando IA.\")\n\n# Interfaz de usuario\nst.subheader(\"\ud83d\udcdd Informaci\u00f3n del Correo\")\n\n# Campos de entrada\ncol1, col2 = st.columns(2)\nwith col1:\n    destinatario = st.text_input(\"Para (destinatario):\", placeholder=\"ejemplo@correo.com\")\n    asunto = st.text_input(\"Asunto:\", placeholder=\"Asunto del correo\")\n\nwith col2:\n    tono = st.selectbox(\n        \"Tono del correo:\",\n        [\"Profesional\", \"Amigable\", \"Formal\", \"Casual\", \"Persuasivo\"]\n    )\n    tipo_correo = st.selectbox(\n        \"Tipo de correo:\",\n        [\"Comercial\", \"Informativo\", \"Solicitud\", \"Agradecimiento\", \"Seguimiento\", \"Invitaci\u00f3n\"]\n    )\n\n# Palabras clave\nst.subheader(\"\ud83d\udd11 Palabras Clave\")\npalabras_clave = st.text_area(\n    \"Ingresa las palabras clave (separadas por comas):\",\n    placeholder=\"producto, descuento, oferta especial, cliente, promoci\u00f3n\",\n    height=100\n)\n\n# Contexto adicional\ncontexto = st.text_area(\n    \"Contexto adicional (opcional):\",\n    placeholder=\"Informaci\u00f3n adicional que quieras incluir en el correo...\",\n    height=80\n)\n\n# Bot\u00f3n para generar\ngenerar = st.button(\"\ud83d\udce7 Generar Correo\", type=\"primary\")\n\n# Funci\u00f3n para generar correo\ndef generar_correo(palabras_clave, destinatario, asunto, tono, tipo_correo, contexto):\n    if not palabras_clave:\n        return \"Por favor, ingresa al menos una palabra clave.\"\n\n    try:\n        # Construir el prompt para Gemini\n        prompt = f\"\"\"\nGenera un correo electr\u00f3nico {tono.lower()} de tipo {tipo_correo.lower()} usando las siguientes palabras clave: {palabras_clave}\n\nInstrucciones:\n- El correo debe ser {tono.lower()} y apropiado para un contexto {tipo_correo.lower()}\n- Incluye un saludo apropiado\n- Desarrolla el contenido principal incorporando naturalmente las palabras clave\n- Incluye una despedida profesional\n- El correo debe ser claro, conciso y bien estructurado\n- Longitud aproximada: 150-300 palabras\n\"\"\"\n\n        if destinatario:\n            prompt += f\"\\n- Dirigido a: {destinatario}\"\n        if asunto:\n            prompt += f\"\\n- Sobre el tema: {asunto}\"\n        if contexto:\n            prompt += f\"\\n- Contexto adicional: {contexto}\"\n\n        prompt += \"\\n\\nGenera solo el contenido del correo, sin incluir campos como 'Para:', 'De:', 'Asunto:' en el texto.\"\n\n        client = genai.Client(api_key=\"AIzaSyAl-dcF-3pWwNx7-owuCkJlpj_C3h0yqbI\")\n        response = client.models.generate_content(\n            model=\"gemini-2.0-flash\", contents=prompt\n        )\n        return response.text\n    except Exception as e:\n        return f\"Error al generar el correo: {str(e)}\"\n\n# L\u00f3gica principal\nif generar:\n    if not palabras_clave.strip():\n        st.error(\"\u26a0\ufe0f Por favor, ingresa al menos una palabra clave.\")\n    else:\n        with st.spinner(\"\ud83e\udd16 Generando correo electr\u00f3nico...\"):\n            correo_generado = generar_correo(\n                palabras_clave, destinatario, asunto, tono, tipo_correo, contexto\n            )\n\n            # Mostrar el resultado\n            st.success(\"\u2705 \u00a1Correo generado exitosamente!\")\n\n            # Informaci\u00f3n del correo\n            st.subheader(\"\ud83d\udccb Informaci\u00f3n del Correo\")\n            info_col1, info_col2 = st.columns(2)\n\n            with info_col1:\n                if destinatario:\n                    st.write(f\"**Para:** {destinatario}\")\n                if asunto:\n                    st.write(f\"**Asunto:** {asunto}\")\n\n            with info_col2:\n                st.write(f\"**Tono:** {tono}\")\n                st.write(f\"**Tipo:** {tipo_correo}\")\n\n            st.write(f\"**Palabras clave:** {palabras_clave}\")\n\n            # Contenido del correo\n            st.subheader(\"\ud83d\udce7 Contenido del Correo\")\n            st.markdown(\"---\")\n            st.markdown(correo_generado)\n            st.markdown(\"---\")\n\n            # Bot\u00f3n para copiar\n            st.code(correo_generado, language=None)\n            st.info(\"\ud83d\udca1 Puedes copiar el texto del cuadro de arriba para usar en tu cliente de correo.\")\nelse:\n    st.info(\"\ud83d\udc46 Completa los campos y haz clic en 'Generar Correo' para crear tu correo electr\u00f3nico.\")\n\n# Sidebar con informaci\u00f3n\nwith st.sidebar:\n    st.header(\"\u2139\ufe0f Informaci\u00f3n\")\n    st.markdown(\"\"\"\n    ### C\u00f3mo usar:\n    1. **Completa los campos** b\u00e1sicos del correo\n    2. **Selecciona el tono** y tipo de correo\n    3. **Ingresa palabras clave** relevantes\n    4. **A\u00f1ade contexto** si es necesario\n    5. **Genera** tu correo personalizado\n\n    ### Consejos:\n    - Usa palabras clave espec\u00edficas y relevantes\n    - El contexto adicional ayuda a personalizar mejor el correo\n    - Puedes generar m\u00faltiples versiones cambiando las palabras clave\n    \"\"\")\n\n    st.markdown(\"---\")\n    st.markdown(\"**Powered by Gemini AI** \ud83e\udd16\")\n</code></pre>"},{"location":"content/p2/#ejecutar-app2py","title":"Ejecutar app2.py","text":"<pre><code>streamlit run app2.py\n</code></pre>"},{"location":"content/p2/#uso-de-las-aplicaciones","title":"\ud83c\udfaf Uso de las Aplicaciones","text":""},{"location":"content/p2/#app1-chat-basico","title":"App1 - Chat B\u00e1sico","text":"<ol> <li>Ejecuta la aplicaci\u00f3n</li> <li>Escribe tu pregunta en el campo de texto</li> <li>Haz clic en \"Generar Respuesta\"</li> <li>Ve la respuesta de Gemini AI</li> </ol>"},{"location":"content/p2/#app2-generador-de-correos","title":"App2 - Generador de Correos","text":"<ol> <li>Ejecuta la aplicaci\u00f3n</li> <li>Completa los campos opcionales (destinatario, asunto)</li> <li>Selecciona el tono y tipo de correo</li> <li>Ingresa las palabras clave (obligatorio)</li> <li>A\u00f1ade contexto adicional si es necesario</li> <li>Haz clic en \"Generar Correo\"</li> <li>Copia el correo generado desde el cuadro de c\u00f3digo</li> </ol>"},{"location":"content/p2/#personalizacion","title":"\ud83d\udee0\ufe0f Personalizaci\u00f3n","text":""},{"location":"content/p2/#modificar-la-api-key","title":"Modificar la API Key","text":"<p>Reemplaza la API Key en ambos archivos: <pre><code>client = genai.Client(api_key=\"TU_NUEVA_API_KEY\")\n</code></pre></p>"},{"location":"content/p2/#cambiar-el-modelo-de-gemini","title":"Cambiar el modelo de Gemini","text":"<p>Puedes usar diferentes modelos: <pre><code>response = client.models.generate_content(\n    model=\"gemini-pro\",  # o \"gemini-2.0-flash\"\n    contents=prompt\n)\n</code></pre></p>"},{"location":"content/p2/#personalizar-la-interfaz","title":"Personalizar la interfaz","text":"<ul> <li>Modifica los t\u00edtulos y descripciones</li> <li>Cambia los colores y estilos con CSS personalizado</li> <li>A\u00f1ade nuevos campos o opciones</li> </ul>"},{"location":"content/p2/#estructura-final-del-proyecto","title":"\ud83d\udcc1 Estructura Final del Proyecto","text":"<pre><code>gemini_test/\n\u251c\u2500\u2500 .venv/                 # Entorno virtual\n\u251c\u2500\u2500 .env.example          # Plantilla para variables de entorno\n\u251c\u2500\u2500 app1.py              # Chat b\u00e1sico con Gemini\n\u251c\u2500\u2500 app2.py              # Generador de correos\n\u251c\u2500\u2500 INSTALACION.md       # Gu\u00eda de instalaci\u00f3n paso a paso\n\u251c\u2500\u2500 README.md            # Esta documentaci\u00f3n\n\u2514\u2500\u2500 requirements.txt     # Dependencias del proyecto\n</code></pre>"}]}